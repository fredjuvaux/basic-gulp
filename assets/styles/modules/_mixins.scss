/* ==========================================================================
   Circles - usage: @include circle(50px, black);
   ========================================================================== */
@mixin circle($width, $color, $display: block) {
    display: $display;
    width: $width;
    height: $width;
    background: $color;
    -webkit-border-radius: $width/2;
    -moz-border-radius: $width/2;
    border-radius: $width/2;
    text-align: center;
    line-height: $width;
}

/* ==========================================================================
   Responsive
   ========================================================================== */
// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, $breakpoints: (xs: 0, sm: 34rem, md: 45rem))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 34rem, md: 45rem))
//    34rem
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 34rem, md: 45rem))
//    44.9rem
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 0.1, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }
    @else {
        @content;
    }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    }
    @else {
        @content;
    }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
    @include media-breakpoint-up($name, $breakpoints) {
        @include media-breakpoint-down($name, $breakpoints) {
            @content;
        }
    }
}

/* ==========================================================================
   Browsers hacks - usage: @include firefox {...}
   ========================================================================== */
@mixin firefox {
    @-moz-document url-prefix() {
        @content;
    }
}
@mixin webkit {
    @media screen and (-webkit-min-device-pixel-ratio:0) {
        @content;
    }
}
@mixin safari {
    html:lang(en) > body {
        @content;
    }
}
@mixin chrome {
    body:nth-of-type(1) {
        @content;
    }
}

/* ==========================================================================
   Clearfix
   ========================================================================== */
%clearfix {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}
.clearfix {
    @extend %clearfix;
}

/* ==========================================================================
   Vertical align - usage : @include vertical-align(50%);
   ========================================================================== */
@mixin vertical-align($value, $position: relative) {
    position: $position;
    top: $value;
    @include translateY(-$value);
}
@mixin align($valueX, $valueY, $position: relative) {
    position: $position;
    left: $valueX;
    top: $valueY;
    @include translate(-$valueX, -$valueY);
}

/* ==========================================================================
   Placeholder - usage: @include placeholder(#f00, #0f0, .2s);
   ========================================================================== */
@mixin placeholder-focus($default: #000, $focus: transparent, $transition: .1s) {
    &::-webkit-input-placeholder {
        color: $default;
        @include transition($transition);
    }
    &:focus::-webkit-input-placeholder {
        color: $focus;
    }
    &:-moz-placeholder {
        color: $default;
        @include transition($transition);
    }
    &:focus:-moz-placeholder {
        color: $focus;
        opacity: 1;
    }
    &::-moz-placeholder {
        color: $default;
        @include transition($transition);
    }
    &:focus::-moz-placeholder {
        color: $focus;
        opacity: 1;
    }
    &:-ms-input-placeholder {
        color: $default;
        @include transition($transition);
    }
    &:focus:-ms-input-placeholder {
        color: $focus;
    }
}
@mixin placeholder($default: #000, $hover: transparent, $transition: .1s) {
    &::-webkit-input-placeholder {
        color: $default;
        @include transition($transition);
    }
    &:hover::-webkit-input-placeholder,
    &:focus::-webkit-input-placeholder {
        color: $hover;
    }
    &:-moz-placeholder {
        color: $default;
        @include transition($transition);
    }
    &:hover:-moz-placeholder,
    &:focus:-moz-placeholder {
        color: $hover;
        opacity: 1;
    }
    &::-moz-placeholder {
        color: $default;
        @include transition($transition);
    }
    &:hover::-moz-placeholder,
    &:focus::-moz-placeholder {
        color: $hover;
        opacity: 1;
    }
    &:-ms-input-placeholder {
        color: $default;
        @include transition($transition);
    }
    &:hover:-ms-input-placeholder,
    &:focus:-ms-input-placeholder {
        color: $hover;
    }
}
